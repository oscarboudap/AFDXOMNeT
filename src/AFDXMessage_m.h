//
// Generated file, do not edit! Created by nedtool 5.6 from AFDXMessage.msg.
//

#ifndef __AFDX_AFDXMESSAGE_M_H
#define __AFDX_AFDXMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "queueinglib/Job.h"
// }}


namespace afdx {

/**
 * Class generated from <tt>AFDXMessage.msg:27</tt> by nedtool.
 * <pre>
 * //
 * // A Message describing an AFDX msg. (length)  
 * //
 * message AFDXMessage extends queueing::Job
 * {
 *     int networkId;       // (1) used as [n]
 *     int equipmentId;     // (1) used as [e]
 *     int interfaceId;     // (3bit) used as [i] 
 *     int virtualLinkId;   // (2) used as [v]
 *     int seqNum;          // (1) used as [s]
 *     int partitionId;     // (5bit) used as [p] 
 * 
 *     // preamble (7)
 *     // SFD (1)
 *     // *** start ethernet frame ***
 *     // abstract string ethDestAddr; // (6) derived as: 00000011 00000000 00000000 00000000 vvvvvvvv vvvvvvvv     
 *     // abstract string ethSrcAddr; // (6) derived as: 00000010 00000000 00000000 nnnnnnnn eeeeeeee iii00000
 *     // type (2) - always IPv4
 *     // payload (46-1500)
 *     // FCS (4)
 *     // *** end ethernet frame ***
 *     // IFG (12)
 * 
 *     // *** start ip layer ***  
 *     // length, frag control, checksum not modeled - (12)
 *     // abstract string ipSrcAddress; // (4) derived as : 00001010 nnnnnnnn eeeeeeee xxxppppp
 *     // abstract string ipDestAddress; // (4) derived as: 11100000 11100000 vvvvvvvv vvvvvvvv 
 *     // *** end ip layer ***
 * 
 *     // *** start udp header ***
 *     int udpSrcPort;    // (2)
 *     int udpDestPort;   // (2)
 *     // payload length - not modeled (2)
 *     // CRC - not modeled (2)
 *     // *** end udp header ***
 * 
 * }
 * </pre>
 */
class AFDXMessage : public ::queueing::Job
{
  protected:
    int networkId;
    int equipmentId;
    int interfaceId;
    int virtualLinkId;
    int seqNum;
    int partitionId;
    int udpSrcPort;
    int udpDestPort;

  private:
    void copy(const AFDXMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AFDXMessage&);

  public:
    AFDXMessage(const char *name=nullptr, short kind=0);
    AFDXMessage(const AFDXMessage& other);
    virtual ~AFDXMessage();
    AFDXMessage& operator=(const AFDXMessage& other);
    virtual AFDXMessage *dup() const override {return new AFDXMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getNetworkId() const;
    virtual void setNetworkId(int networkId);
    virtual int getEquipmentId() const;
    virtual void setEquipmentId(int equipmentId);
    virtual int getInterfaceId() const;
    virtual void setInterfaceId(int interfaceId);
    virtual int getVirtualLinkId() const;
    virtual void setVirtualLinkId(int virtualLinkId);
    virtual int getSeqNum() const;
    virtual void setSeqNum(int seqNum);
    virtual int getPartitionId() const;
    virtual void setPartitionId(int partitionId);
    virtual int getUdpSrcPort() const;
    virtual void setUdpSrcPort(int udpSrcPort);
    virtual int getUdpDestPort() const;
    virtual void setUdpDestPort(int udpDestPort);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AFDXMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AFDXMessage& obj) {obj.parsimUnpack(b);}

} // namespace afdx

#endif // ifndef __AFDX_AFDXMESSAGE_M_H

